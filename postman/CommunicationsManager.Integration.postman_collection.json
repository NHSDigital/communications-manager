{
   "collection" : {
      "event" : [
         {
            "listen" : "prerequest",
            "script" : {
               "exec" : [
                  "var uuid = require('uuid');",
                  "",
                  "var privateKey = pm.environment.get('private_key') || '';",
                  "var api_key_value = pm.environment.get('api_key') || '';",
                  "",
                  "if (!privateKey) {",
                  "    throw new Error(\"Variable private_key must be set with your private key for signed JWT authentication.\");",
                  "}",
                  "",
                  "if (!api_key_value) {",
                  "    throw new Error(\"Variable api_key must be set with your integration testing application API key.\");",
                  "}",
                  "",
                  "var auth_url = 'https://int.api.service.nhs.uk/oauth2/token';",
                  "var navigator = {};",
                  "var window = {};",
                  "const interval = setTimeout(() => {}, 2147483647);",
                  "",
                  "return new Promise((resolve, reject) => {        ",
                  "    if (pm.globals.has('jsrsasign-js') && pm.globals.get('jsrsasign-js') !== \"\") {",
                  "        return resolve();",
                  "    }",
                  "",
                  "    pm.sendRequest(",
                  "        {",
                  "            url: 'https://kjur.github.io/jsrsasign/jsrsasign-all-min.js',",
                  "            method: 'GET'",
                  "        }, function (err, res) {",
                  "            if (err) {",
                  "                return reject(err);",
                  "            }",
                  "",
                  "            pm.globals.set('jsrsasign-js', res.text());            ",
                  "            return resolve();",
                  "        }",
                  "    );",
                  "}).then(() => {             ",
                  "    eval(pm.globals.get(\"jsrsasign-js\"));        ",
                  "",
                  "    // Set headers for JWT",
                  "    var header = {",
                  "        'typ': 'JWT',",
                  "        'alg': 'RS512',",
                  "        'kid': 'local'",
                  "    };",
                  "",
                  "    // Prepare timestamp in seconds",
                  "    var currentTimestamp = Math.floor(Date.now() / 1000)",
                  "    var uuid = require('uuid');",
                  "    var jti_value = uuid.v4();",
                  "    var data = {",
                  "        'sub': api_key_value,",
                  "        'iss': api_key_value,",
                  "        'jti': jti_value,",
                  "        'aud': auth_url,",
                  "        'exp': currentTimestamp + 180, // expiry time is 180 seconds from time of creation",
                  "    }    ",
                  "",
                  "    var sJWT = KJUR.jws.JWS.sign(header.alg, JSON.stringify(header), JSON.stringify(data), privateKey);    ",
                  "    return new Promise((resolve, reject) => {                              ",
                  "        pm.sendRequest({",
                  "            url: auth_url,",
                  "            method: \"POST\",",
                  "            header: {",
                  "                \"Content-Type\": \"application/x-www-form-urlencoded\"",
                  "            },",
                  "            body: {",
                  "                mode: \"urlencoded\",",
                  "                urlencoded: [",
                  "                    {",
                  "                        key: \"grant_type\",",
                  "                        value: \"client_credentials\"",
                  "                    },",
                  "                    {",
                  "                        key: \"client_assertion_type\",",
                  "                        value: \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\",",
                  "                    },",
                  "                    {",
                  "                        key: \"client_assertion\",",
                  "                        value: sJWT",
                  "                    }",
                  "                ]",
                  "            }",
                  "        }, function (err, res) {                                            ",
                  "            if (err) {",
                  "                return reject(err);",
                  "            }",
                  "",
                  "            //assign the authorization header value",
                  "            pm.environment.set('authorization_header_value', `Bearer ${res.json().access_token}`);",
                  "",
                  "            //assign the message batch reference",
                  "            pm.environment.set(\"message_batch_reference\", uuid.v4());",
                  "",
                  "            //assign the message reference",
                  "            pm.environment.set(\"message_reference\", uuid.v4());",
                  "",
                  "            //generate a correlation identifier",
                  "            pm.environment.set(\"correlation_id\", uuid.v4());",
                  "",
                  "            return resolve();",
                  "        });        ",
                  "    });",
                  "}).then(() => {    ",
                  "    clearTimeout(interval);",
                  "}).catch((err) => {     ",
                  "    console.error(err); ",
                  "    clearTimeout(interval);    ",
                  "});"
               ],
               "id" : "6d182916-1352-4f7e-bc2f-5402971ea2d3",
               "type" : "text/javascript"
            }
         },
         {
            "listen" : "test",
            "script" : {
               "exec" : [
                  ""
               ],
               "id" : "dc1945c6-e8f1-4c50-ae33-7014b01dbbc0",
               "type" : "text/javascript"
            }
         }
      ],
      "info" : {
         "_postman_id" : "fbe32763-302e-4a0b-b6e9-3a20f1bde923",
         "description" : "This collection enables you to make requests against our integration test environment.\n\nThis environment requires you to be authenticated and authorised to make these requests, plus you must have completed (or be in the progress of) onboarding onto the Communications Manager Service.\n\nFor more information on the Communications Manager API please refer to [the documentation](https://digital.nhs.uk/developer/api-catalogue/communications-manager).\n\n## Authentication\n\nThis collection will carry out the [signed JWT authentication flow](https://digital.nhs.uk/developer/guides-and-documentation/security-and-authorisation/application-restricted-restful-apis-signed-jwt-authentication) for you automatically.\n\nYou must provide your API key and private key within the environment variables.\n\nIf you have not yet created an API client with an API key and private key, then please [refer to the documentation](https://digital.nhs.uk/developer/guides-and-documentation/security-and-authorisation/application-restricted-restful-apis-signed-jwt-authentication). Instructions are given here on how to create an application and how to generate a key pair for generating bearer tokens.\n\nMake sure to create your API application in the `Integration Testing` environment, and to request access to the `Communications Manager (Integration Testing)` API. Your API application will be granted access to this API automatically.\n\nOnce you have your API key and your private key, put these into the `api_key` and `private_key` variables within the `Integration` environment.\n\nRequests will now have a bearer token attached to them automatically, authenticating your requests.\n\nIf you have not yet started the onboarding process with the Communications Manager service then your requests, although authenticated, will return a `403 - Forbidden` response.\n\n**Ensure that your API key and private key are kept secret at all times!**\n\n**If you publish/share your API key or private key you must revoke them via the** [NHS onboarding portal](https://onboarding.prod.api.platform.nhs.uk/) **immediately.**\n\nLeaking these credentials will allow other people to generate tokens to call the API on your behalf.",
         "name" : "Communications Manager - Integration",
         "schema" : "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
         "uid" : "28740466-fbe32763-302e-4a0b-b6e9-3a20f1bde923",
         "updatedAt" : "2024-01-03T15:56:30.000Z"
      },
      "item" : [
         {
            "description" : "These example calls show how to use the send messages endpoint. This endpoint allows you to create a `MessageBatch`.\n\nFor more information on this endpoint [refer to the documentation](https://digital.nhs.uk/developer/api-catalogue/communications-manager#post-/v1/message-batches).",
            "id" : "f5ca3438-8247-4f80-a0f2-29dfb6ee85d3",
            "item" : [
               {
                  "event" : [
                     {
                        "listen" : "prerequest",
                        "script" : {
                           "exec" : [
                              ""
                           ],
                           "id" : "832ce22d-e604-4477-8b49-6add91920812",
                           "type" : "text/javascript"
                        }
                     },
                     {
                        "listen" : "test",
                        "script" : {
                           "exec" : [
                              "pm.test(\"Correlation identifier is returned\", () => {\r",
                              "    pm.response.to.have.header(\"x-correlation-id\");\r",
                              "    pm.response.to.be.header(\"x-correlation-id\", pm.environment.get(\"correlation_id\"));\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Content-negotiation was successful\", () => {\r",
                              "    pm.response.to.have.header(\"content-type\");\r",
                              "    pm.response.to.be.header(\"content-type\", pm.environment.get(\"mime_type\"));\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Status code is 201\", () => {\r",
                              "    pm.response.to.have.status(201);\r",
                              "});"
                           ],
                           "id" : "59dadc53-94c6-4329-8f96-668bd304968b",
                           "type" : "text/javascript"
                        }
                     }
                  ],
                  "id" : "1c5c08e7-9088-4ab8-aa82-75bcf21a805d",
                  "name" : "201 - Message Batch Created",
                  "protocolProfileBehavior" : {
                     "disableBodyPruning" : true
                  },
                  "request" : {
                     "body" : {
                        "mode" : "raw",
                        "options" : {
                           "raw" : {
                              "language" : "json"
                           }
                        },
                        "raw" : "{\r\n    \"data\": {\r\n        \"type\": \"MessageBatch\",\r\n        \"attributes\": {\r\n            \"routingPlanId\": \"{{routing_plan_id}}\",\r\n            \"messageBatchReference\": \"{{message_batch_reference}}\",\r\n            \"messages\": [\r\n                {\r\n                    \"messageReference\": \"703b8008-545d-4a04-bb90-1f2946ce1575\",\r\n                    \"recipient\": {\r\n                        \"nhsNumber\": \"9990548609\",\r\n                        \"dateOfBirth\": \"1932-01-06\"\r\n                    },\r\n                    \"personalisation\": {\r\n                        \"custom\" : \"value\"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}"
                     },
                     "description" : "Sends a request to create a message batch.\n\nIt is possible to toggle the mime type used for sending and receiving data by changing the `mime_type` environment variable. Valid values for this can be found in [the documentation](https://digital.nhs.uk/developer/api-catalogue/communications-manager#post-/v1/message-batches).\n\nA random `X-Correlation-Id` header and `messageBatchReference` body value will be generated for each request in the pre-request script.",
                     "header" : [
                        {
                           "key" : "Content-Type",
                           "type" : "default",
                           "value" : "{{mime_type}}"
                        },
                        {
                           "key" : "Accept",
                           "type" : "default",
                           "value" : "{{mime_type}}"
                        },
                        {
                           "key" : "Authorization",
                           "type" : "default",
                           "value" : "{{authorization_header_value}}"
                        },
                        {
                           "key" : "X-Correlation-Id",
                           "type" : "text",
                           "value" : "{{correlation_id}}"
                        }
                     ],
                     "method" : "POST",
                     "url" : {
                        "host" : [
                           "{{base_url}}"
                        ],
                        "path" : [
                           "v1",
                           "message-batches"
                        ],
                        "raw" : "{{base_url}}/v1/message-batches"
                     }
                  },
                  "response" : [],
                  "uid" : "28740466-1c5c08e7-9088-4ab8-aa82-75bcf21a805d"
               },
               {
                  "event" : [
                     {
                        "listen" : "prerequest",
                        "script" : {
                           "exec" : [
                              ""
                           ],
                           "id" : "832ce22d-e604-4477-8b49-6add91920812",
                           "type" : "text/javascript"
                        }
                     },
                     {
                        "listen" : "test",
                        "script" : {
                           "exec" : [
                              "pm.test(\"Correlation identifier is returned\", () => {\r",
                              "    pm.response.to.have.header(\"x-correlation-id\");\r",
                              "    pm.response.to.be.header(\"x-correlation-id\", pm.environment.get(\"correlation_id\"));\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Content-negotiation was successful\", () => {\r",
                              "    pm.response.to.have.header(\"content-type\");\r",
                              "    pm.response.to.be.header(\"content-type\", pm.environment.get(\"mime_type\"));\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Status code is 201\", () => {\r",
                              "    pm.response.to.have.status(201);\r",
                              "});"
                           ],
                           "id" : "59dadc53-94c6-4329-8f96-668bd304968b",
                           "type" : "text/javascript"
                        }
                     }
                  ],
                  "id" : "611761b4-f4aa-408b-85a3-4cc4a4eec71a",
                  "name" : "201 - Send Single Message",
                  "protocolProfileBehavior" : {
                     "disableBodyPruning" : true
                  },
                  "request" : {
                     "body" : {
                        "mode" : "raw",
                        "options" : {
                           "raw" : {
                              "language" : "json"
                           }
                        },
                        "raw" : "{\r\n    \"data\": {\r\n        \"type\": \"Message\",\r\n        \"attributes\": {\r\n            \"routingPlanId\": \"{{routing_plan_id}}\",\r\n            \"messageReference\": \"{{message_reference}}\",\r\n            \"recipient\": {\r\n                \"nhsNumber\": \"9990548609\",\r\n                \"dateOfBirth\": \"1932-01-06\"\r\n            },\r\n            \"personalisation\": {\r\n                \"custom\": \"value\"\r\n            }\r\n        }\r\n    }\r\n}"
                     },
                     "description" : "Sends a request to send a single message.\n\nIt is possible to toggle the mime type used for sending and receiving data by changing the `mime_type` environment variable. Valid values for this can be found in [the documentation](https://digital.nhs.uk/developer/api-catalogue/communications-manager#post-/v1/message-batches).\n\nA random `X-Correlation-Id` header and `messageReference` body value will be generated for each request in the pre-request script.",
                     "header" : [
                        {
                           "key" : "Content-Type",
                           "value" : "{{mime_type}}"
                        },
                        {
                           "key" : "Accept",
                           "value" : "{{mime_type}}"
                        },
                        {
                           "key" : "Authorization",
                           "value" : "{{authorization_header_value}}"
                        },
                        {
                           "key" : "X-Correlation-Id",
                           "value" : "{{correlation_id}}"
                        }
                     ],
                     "method" : "POST",
                     "url" : {
                        "host" : [
                           "{{base_url}}"
                        ],
                        "path" : [
                           "v1",
                           "messages"
                        ],
                        "raw" : "{{base_url}}/v1/messages"
                     }
                  },
                  "response" : [],
                  "uid" : "28740466-611761b4-f4aa-408b-85a3-4cc4a4eec71a"
               }
            ],
            "name" : "Send Messages",
            "uid" : "28740466-f5ca3438-8247-4f80-a0f2-29dfb6ee85d3"
         }
      ],
      "variable" : [
         {
            "key" : "base_url",
            "type" : "string",
            "value" : "https://int.api.service.nhs.uk/comms"
         },
         {
            "key" : "routing_plan_id",
            "type" : "string",
            "value" : "119bdd50-783c-4161-a765-792785e46851"
         }
      ]
   }
}
