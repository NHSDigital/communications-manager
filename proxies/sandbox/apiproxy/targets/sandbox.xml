<TargetEndpoint name="sandbox">
    <Description/>
    <Flows>
        <Flow name="CreateMessageBatchEndpoint">
            <Description>Handle create message batch</Description>
            <Request>
                <Step>
                    <Name>JavaScript.MessageBatches.Create.Request</Name>
                </Step>
                <Step>
                    <Name>AssignMessage.MessageBatches.Create.Request</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Name>ExtractVariables.MessageBatches.Create.Response</Name>
                </Step>
                <Step>
                    <Name>AssignMessage.MessageBatches.Create.Response</Name>
                </Step>
            </Response>
            <Condition>
                (proxy.pathsuffix MatchesPath "/v1/message-batches") and (request.verb = "POST")
            </Condition>
        </Flow>
    </Flows>
    <FaultRules>
        <FaultRule name="combined_backend_fault_handler">
            <Step>
                <Name>JavaScript.SetResponseContentType</Name>
            </Step>
            <Step>
                <Name>RaiseFault.404InvalidRoutingPlan</Name>
                <Condition>
                    response.status.code = 404 and response.content Like "*Routing Config does not exist for sendingGroupId*"
                </Condition>
            </Step>
            <Step>
                <Name>RaiseFault.404NotFound</Name>
                <Condition>
                    response.status.code = 404
                </Condition>
            </Step>
            <Step>
                <Name>RaiseFault.400BackendException.DuplicateRequestItemRefIds</Name>
                <Condition>
                    response.status.code = 400 and response.content Like "*Duplicate requestItemRefIds*"
                </Condition>
            </Step>
            <Step>
                <Name>RaiseFault.400BackendException.MissingSendingGroupId</Name>
                <Condition>
                    response.status.code = 400 and response.content Like "*Missing sendingGroupId*"
                </Condition>
            </Step>
            <Step>
                <Name>RaiseFault.400BackendException.MissingRequestRefId</Name>
                <Condition>
                    response.status.code = 400 and response.content Like "*Missing requestRefId*"
                </Condition>
            </Step>
            <Step>
                <Name>RaiseFault.400BackendException.MissingDataArray</Name>
                <Condition>
                    response.status.code = 400 and response.content Like "*Missing data array*"
                </Condition>
            </Step>
            <Step>
                <Name>RaiseFault.504GatewayTimeout</Name>
                <Condition>fault.name = "GatewayTimeout" or response.status.code = 504</Condition>
            </Step>
            <Step>
                <Name>RaiseFault.408RequestTimeout</Name>
                <Condition>fault.name = "RequestTimeout" or response.status.code = 408</Condition>
            </Step>
        </FaultRule>
    </FaultRules>
    <PostFlow name="PostFlow">
        <Response>
            <Step>
                <Name>JavaScript.SetResponseContentType</Name>
            </Step>
        </Response>
    </PostFlow>
    <PreFlow name="PreFlow">
        <Request>
            <Step>
                <Name>RaiseFault.408RequestTimeout</Name>
                <Condition>request.header.Prefer = "code=408"</Condition>
            </Step>
            <Step>
                <Name>RaiseFault.504GatewayTimeout</Name>
                <Condition>request.header.Prefer = "code=504"</Condition>
            </Step>
            <Step>
                <Name>AssignMessage.AddDefaultRequestPath</Name>
            </Step>
            <Step>
                <Name>RaiseFault.401Unauthorized</Name>
                <Condition>
                    request.header.Authorization = "Bearer InvalidMockToken"
                </Condition>
            </Step>
            <Step>
              <Name>RaiseFault.403Forbidden</Name>
              <Condition>
                request.header.Authorization = "Bearer ClientNotRecognised"
              </Condition>
            </Step>
            <Step>
                <Name>RaiseFault.406NotAcceptable</Name>
                <Condition>
                    request.header.Accept != "*/*" and request.header.Accept != "application/json" and request.header.Accept != "application/vnd.api+json"
                </Condition>
            </Step>
            <Step>
                <Name>RaiseFault.415UnsupportedMedia</Name>
                <Condition>
                    (request.verb = "POST" or request.verb = "PATCH" or request.verb = "PUT") and (request.header.Content-Type = null or (request.header.Content-Type != "application/json" and request.header.Content-Type != "application/vnd.api+json"))
                </Condition>
            </Step>
            <Step>
                <Name>RaiseFault.429TooManyRequests</Name>
                <Condition>fault.name = "SpikeArrestViolation" or request.header.Prefer = "code=429"</Condition>
            </Step>
            <Step>
                <Name>JavaScript.MessageBatches.Create.Validate</Name>
                <Condition>
                    (proxy.pathsuffix MatchesPath "/v1/message-batches") and (request.verb = "POST")
                </Condition>
            </Step>
            <Step>
                <Name>RaiseFault.400BadRequest</Name>
                <Condition>errors != null</Condition>
            </Step>
        </Request>
        <Response>
            <Step>
                <Name>AssignMessage.AddCors</Name>
            </Step>
        </Response>
    </PreFlow>
    <HTTPTargetConnection>
        {{ HOSTED_TARGET_CONNECTION }}
        <Properties>
            <!-- this is set to 2 seconds here to make it quicker to test, in live this should be 29 seconds -->
            <Property name="io.timeout.millis">2000</Property>
        </Properties>
    </HTTPTargetConnection>
</TargetEndpoint>
