<TargetEndpoint name="communications-manager-target">
  <PreFlow>
    <Request>
      <Step>
        <Name>OauthV2.VerifyAccessTokenAppLevel3OrCis2Aal3</Name>
      </Step>
      <Step>
        <Name>RaiseFault.406NotAcceptable</Name>
        <Condition>
          request.header.Accept != "*/*" and request.header.Accept != "application/json" and request.header.Accept != "application/vnd.api+json"
        </Condition>
      </Step>
      <Step>
        <Name>RaiseFault.415UnsupportedMedia</Name>
        <Condition>
          (request.verb = "POST" or request.verb = "PATCH" or request.verb = "PUT") and (request.header.Content-Type = null or (request.header.Content-Type != "application/json" and request.header.Content-Type != "application/vnd.api+json"))
        </Condition>
      </Step>
      <Step>
        <Name>RaiseFault.404NotFound</Name>
        <Condition>
          (proxy.pathsuffix != "/v1/message-batches") or (proxy.pathsuffix == "/v1/message-batches" and request.verb != "POST")
        </Condition>
      </Step>
      <Step>
        <Name>JavaScript.MessageBatches.Create.Validate</Name>
        <Condition>
          (proxy.pathsuffix MatchesPath "/v1/message-batches") and (request.verb = "POST")
        </Condition>
      </Step>
      <Step>
        <Name>FlowCallout.ApplyRateLimiting</Name>
      </Step>
    </Request>
  </PreFlow>
  <Flows>
    <Flow name="CreateMessageBatchEndpoint">
      <Description>Handle create message batch</Description>
      <Request>
        <Step>
          <Name>JavaScript.MessageBatches.Create.Request</Name>
        </Step>
        <Step>
          <Name>AssignMessage.MessageBatches.Create.Request</Name>
        </Step>
        <Step>
          <Name>AssignMessage.AuthenticationDetails</Name>
        </Step>
      </Request>
      <Response>
          <Step>
            <Name>ExtractVariables.MessageBatches.Create.Response</Name>
          </Step>
          <Step>
            <Name>AssignMessage.MessageBatches.Create.Response</Name>
          </Step>
      </Response>
      <Condition>
        (proxy.pathsuffix MatchesPath "/v1/message-batches") and (request.verb = "POST")
      </Condition>
    </Flow>
  </Flows>
  <PostFlow name="PostFlow">
    <Response>
      <Step>
        <Name>JavaScript.SetResponseContentType</Name>
      </Step>
      <Step>
        <Name>AssignMessage.AddCorsResponse</Name>
        <Condition>(request.header.origin != null) and (request.verb != "OPTIONS")</Condition>
      </Step>
    </Response>
  </PostFlow>
  <FaultRules>
    <FaultRule name="invalid_routing_plan">
      <Step>
        <Name>RaiseFault.404InvalidRoutingPlan</Name>
      </Step>
      <Condition>
        response.status.code = 404 and response.content Like "*Routing Config does not exist for sendingGroupId*"
      </Condition>
    </FaultRule>
    <FaultRule name="not_found">
      <Step>
        <Name>RaiseFault.404NotFound</Name>
      </Step>
      <Condition>
        response.status.code = 404
      </Condition>
    </FaultRule>
    <FaultRule name="backend_duplicate_requestItemRefIds">
      <Step>
        <Name>RaiseFault.400BackendException.DuplicateRequestItemRefIds</Name>
      </Step>
      <Condition>
        response.status.code = 400 and response.content Like "*Duplicate requestItemRefIds*"
      </Condition>
    </FaultRule>
    <FaultRule name="backend_missing_sendingGroupId">
      <Step>
        <Name>RaiseFault.400BackendException.MissingSendingGroupId</Name>
      </Step>
      <Condition>
        response.status.code = 400 and response.content Like "*Missing sendingGroupId*"
      </Condition>
    </FaultRule>
    <FaultRule name="backend_missing_requestRefId">
      <Step>
        <Name>RaiseFault.400BackendException.MissingRequestRefId</Name>
      </Step>
      <Condition>
        response.status.code = 400 and response.content Like "*Missing requestRefId*"
      </Condition>
    </FaultRule>
    <FaultRule name="backend_missing_data_array">
      <Step>
        <Name>RaiseFault.400BackendException.MissingDataArray</Name>
      </Step>
      <Condition>
        response.status.code = 400 and response.content Like "*Missing data array*"
      </Condition>
    </FaultRule>
    </FaultRules>
  <!--
    To point to a named target server as this is how it SHOULD be implemented:
    For example:
    <HTTPTargetConnection>
      <SSLInfo>
        <Enabled>true</Enabled>
      </SSLInfo>
      <LoadBalancer>
        <Server name="communications-manager" />
      </LoadBalancer>
    </HTTPTargetConnection>
  -->
  <HTTPTargetConnection>
    <SSLInfo>
      <Enabled>true</Enabled>
    </SSLInfo>
    <LoadBalancer>
      <Server name="communications-manager-target" />
    </LoadBalancer>
  </HTTPTargetConnection>
</TargetEndpoint>
