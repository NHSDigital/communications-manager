parameters:
  - name: full
    type: boolean
    default: false
  - name: test_command
    type: string
    default: 'make test-dev'
  - name: smoketest_command
    type: string
    default: 'make smoketest'
  - name: sandboxtest_command
    type: string
    default: 'make sandboxtest'
  - name: inttest_command
    type: string
    default: 'make inttest'
  - name: nightly
    type: boolean
    default: false

steps:
  - template: "azure/components/aws-assume-role.yml@common"
    parameters:
      role: "auto-ops"
      profile: "apm_ptl"

  - template: "azure/components/get-aws-secrets-and-ssm-params.yml@common"
    parameters:
      secret_file_ids:
      - ptl/app-credentials/jwt_testing/non-prod/JWT_TESTING_PRIVATE_KEY
      secret_ids:
      - ptl/app-credentials/communications-manager-testing-app/non-prod/SANDBOX_APP_ID

  - bash: |
      if [ "${{ parameters.nightly }}" != "True" ]; then
        cd $(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)
      fi
      make install-python
    displayName: Setup pytests
    condition: always()

  - ${{ if parameters.nightly }}:
    - template: "azure/components/get-aws-secrets-and-ssm-params.yml@common"
      parameters:
        secret_ids:
          - ptl/azure-devops/apigee-nonprod/APIGEE_OTP_KEY
          - ptl/azure-devops/apigee-nonprod/APIGEE_PASSWORD
        config_ids:
          - /ptl/azure-devops/apigee-nonprod/APIGEE_USERNAME
    - template: "azure/components/get-mfa-code.yml@common"
      parameters:
        apigee_otp_key: $(APIGEE_OTP_KEY)
    - template: "azure/components/get-access-token.yml@common"
      parameters:
        apigee_username: $(APIGEE_USERNAME)
        apigee_password: $(APIGEE_PASSWORD)
    - bash: |
        export PROXY_NAME="communications-manager-internal-dev"
        export APIGEE_ACCESS_TOKEN="$(secret.AccessToken)"
        export APIGEE_APP_ID="$(SANDBOX_APP_ID)"
        export STATUS_ENDPOINT_API_KEY="$(STATUS_ENDPOINT_API_KEY)"
        ${{ parameters.test_command }}
      displayName: Run full test suite
    - task: PublishTestResults@2
      displayName: 'Publish test results'
      condition: always()
      inputs:
        testResultsFiles: 'test-report.xml'
        failTaskOnFailedTests: true
  - ${{ elseif parameters.full }}:
    - bash: |
        export PROXY_NAME="$(FULLY_QUALIFIED_SERVICE_NAME)"
        export APIGEE_ACCESS_TOKEN="$(secret.AccessToken)"
        export APIGEE_APP_ID="$(SANDBOX_APP_ID)"
        export STATUS_ENDPOINT_API_KEY="$(STATUS_ENDPOINT_API_KEY)"
        export SOURCE_COMMIT_ID="$(Build.SourceVersion)"
        ${{ parameters.test_command }}
      workingDirectory: $(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)
      displayName: Run full test suite
    - task: PublishTestResults@2
      displayName: 'Publish test results'
      condition: always()
      inputs:
        testResultsFiles: '$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/test-report.xml'
        failTaskOnFailedTests: true
  - ${{ else }}:
    - bash: |
        export PROXY_NAME="$(FULLY_QUALIFIED_SERVICE_NAME)"
        export APIGEE_ACCESS_TOKEN="$(secret.AccessToken)"
        export APIGEE_APP_ID="$(SANDBOX_APP_ID)"
        export STATUS_ENDPOINT_API_KEY="$(STATUS_ENDPOINT_API_KEY)"
        export SOURCE_COMMIT_ID="$(Build.SourceVersion)"
        ${{ parameters.sandboxtest_command }}
      workingDirectory: $(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)
      displayName: Run sandboxtest
    - task: PublishTestResults@2
      displayName: 'Publish sandboxtest results'
      condition: always()
      inputs:
        testResultsFiles: '$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/sandboxtest-report.xml'
        failTaskOnFailedTests: true
    - task: PublishTestResults@2
      displayName: 'Publish mock unit test results'
      condition: always()
      inputs:
        testResultsFiles: '$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/sandbox/sandbox-unit-report.xml'
        failTaskOnFailedTests: true
